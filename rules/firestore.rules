rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn()
        && exists(/databases/$(database)/documents/roles/$(request.auth.uid))
        && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == "admin";
    }
    function isAllowed() {
      return isSignedIn() && (
        exists(/databases/$(database)/documents/roles/$(request.auth.uid)) ||
        (request.auth.token.email != null &&
         exists(/databases/$(database)/documents/allowlist/$(request.auth.token.email)))
      );
    }
    function validEvent() {
      return request.resource.data.keys().hasAll(['title','start','end','createdBy']) &&
             request.resource.data.title is string &&
             request.resource.data.start is timestamp &&
             request.resource.data.end is timestamp &&
             request.resource.data.end > request.resource.data.start &&
             request.resource.data.createdBy == request.auth.uid;
    }

    match /events/{eventId} {
      allow read: if isAllowed();
      allow create: if isAllowed() && validEvent();
      allow update, delete: if isAllowed() && (isAdmin() || resource.data.createdBy == request.auth.uid);
    }

    match /rsvps/{rsvpId} {
      allow read: if isAllowed();
      allow create, update: if isAllowed()
        && request.resource.data.uid == request.auth.uid
        && (request.resource.data.eventId + "_" + request.auth.uid == rsvpId);
      allow delete: if isAdmin() || (isAllowed() && resource.data.uid == request.auth.uid);
    }

    match /roles/{uid}        { allow read, create, update, delete: if isAdmin(); }
    match /allowlist/{email}  { allow read, create, update, delete: if isAdmin(); }

    match /access_requests/{uid} {
      allow create: if isSignedIn() && uid == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }
  }
}
